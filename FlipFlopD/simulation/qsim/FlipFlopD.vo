// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 32-bit"
// VERSION "Version 13.1.4 Build 182 03/12/2014 SJ Full Version"

// DATE "03/11/2015 11:01:19"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module FlipFlopD_Demo (
	SW,
	KEY,
	LEDR);
input 	[2:0] SW;
input 	[0:0] KEY;
output 	[0:0] LEDR;

// Design Ports Information
// LEDR[0]	=>  Location: PIN_G19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[0]	=>  Location: PIN_AB28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[1]	=>  Location: PIN_AC28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[2]	=>  Location: PIN_AC27,	 I/O Standard: 2.5 V,	 Current Strength: Default
// KEY[0]	=>  Location: PIN_M23,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \KEY[0]~input_o ;
wire \SW[1]~input_o ;
wire \SW[2]~input_o ;
wire \SW[0]~input_o ;
wire \ff_d|q~0_combout ;
wire \ff_d|q~q ;


// Location: IOOBUF_X69_Y73_N16
cycloneive_io_obuf \LEDR[0]~output (
	.i(\ff_d|q~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X115_Y40_N8
cycloneive_io_ibuf \KEY[0]~input (
	.i(KEY[0]),
	.ibar(gnd),
	.o(\KEY[0]~input_o ));
// synopsys translate_off
defparam \KEY[0]~input .bus_hold = "false";
defparam \KEY[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y14_N1
cycloneive_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y15_N8
cycloneive_io_ibuf \SW[2]~input (
	.i(SW[2]),
	.ibar(gnd),
	.o(\SW[2]~input_o ));
// synopsys translate_off
defparam \SW[2]~input .bus_hold = "false";
defparam \SW[2]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y17_N1
cycloneive_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X114_Y40_N16
cycloneive_lcell_comb \ff_d|q~0 (
// Equation(s):
// \ff_d|q~0_combout  = (!\SW[2]~input_o  & ((\SW[1]~input_o ) # (\SW[0]~input_o )))

	.dataa(gnd),
	.datab(\SW[1]~input_o ),
	.datac(\SW[2]~input_o ),
	.datad(\SW[0]~input_o ),
	.cin(gnd),
	.combout(\ff_d|q~0_combout ),
	.cout());
// synopsys translate_off
defparam \ff_d|q~0 .lut_mask = 16'h0F0C;
defparam \ff_d|q~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X114_Y40_N17
dffeas \ff_d|q (
	.clk(\KEY[0]~input_o ),
	.d(\ff_d|q~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\ff_d|q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \ff_d|q .is_wysiwyg = "true";
defparam \ff_d|q .power_up = "low";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

endmodule
